name: Query Processor

on:
  workflow_dispatch:
    inputs:
      query:
        description: 'Query text to process'
        required: true
        type: string
      issue_number:
        description: 'Issue number to post results to (optional)'
        required: false
        type: string
  repository_dispatch:
    types: [query_request]

jobs:
  query-formatter:
    name: ChatGPT Query Formatter
    runs-on: ubuntu-latest
    outputs:
      formatted_query: ${{ steps.format.outputs.formatted_query }}
      api_params: ${{ steps.format.outputs.api_params }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai
      
      - name: Extract query
        id: get-query
        env:
          DISPATCH_QUERY: ${{ inputs.query }}
          PAYLOAD_QUERY: ${{ github.event.client_payload.query }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "query=$DISPATCH_QUERY" >> $GITHUB_OUTPUT
          else
            echo "query=$PAYLOAD_QUERY" >> $GITHUB_OUTPUT
          fi
      
      - name: Format query with ChatGPT
        id: format
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python .github/scripts/query_formatter.py "${{ steps.get-query.outputs.query }}"
      
      - name: Upload Formatted Query
        uses: actions/upload-artifact@v4
        with:
          name: formatted-query
          path: formatted_query.json

  morphosource-api:
    name: MorphoSource API Query
    runs-on: ubuntu-latest
    needs: query-formatter
    outputs:
      results: ${{ steps.search.outputs.results }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Download Formatted Query
        uses: actions/download-artifact@v4
        with:
          name: formatted-query
      
      - name: Search MorphoSource
        id: search
        env:
          MORPHOSOURCE_API_KEY: ${{ secrets.MORPHOSOURCE_API_KEY }}
          FORMATTED_QUERY: ${{ needs.query-formatter.outputs.formatted_query }}
          API_PARAMS: ${{ needs.query-formatter.outputs.api_params }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python .github/scripts/morphosource_api.py "$FORMATTED_QUERY" "$API_PARAMS"

      - name: Upload MorphoSource Results
        uses: actions/upload-artifact@v4
        with:
          name: morphosource-results
          path: |
            morphosource_results.json
            formatted_query_final.json

  chatgpt-processing:
    name: ChatGPT Query Processing
    runs-on: ubuntu-latest
    needs: [query-formatter, morphosource-api]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai requests
      
      - name: Download MorphoSource Results
        uses: actions/download-artifact@v4
        with:
          name: morphosource-results
      
      - name: Download Formatted Query
        uses: actions/download-artifact@v4
        with:
          name: formatted-query
      
      - name: Extract query
        id: get-query
        env:
          DISPATCH_QUERY: ${{ inputs.query }}
          PAYLOAD_QUERY: ${{ github.event.client_payload.query }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "query=$DISPATCH_QUERY" >> $GITHUB_OUTPUT
          else
            echo "query=$PAYLOAD_QUERY" >> $GITHUB_OUTPUT
          fi
      
      - name: Process with ChatGPT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          QUERY_TEXT: ${{ steps.get-query.outputs.query }}
        run: |
          python .github/scripts/chatgpt_processor.py "$QUERY_TEXT"
      
      - name: Upload ChatGPT Response
        uses: actions/upload-artifact@v4
        with:
          name: chatgpt-response
          path: chatgpt_response.json
      
      - name: Summary
        env:
          QUERY_TEXT: ${{ steps.get-query.outputs.query }}
          MORPHOSOURCE_RESULTS: ${{ needs.morphosource-api.outputs.results }}
        run: |
          echo "## Query Processing Complete ‚úì" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Query:** $QUERY_TEXT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **MorphoSource Results:** $MORPHOSOURCE_RESULTS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f chatgpt_response.json ]; then
            echo "ü§ñ **ChatGPT Response:**" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat chatgpt_response.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Post results to issue
        if: ${{ inputs.issue_number != '' }}
        env:
          ISSUE_NUMBER: ${{ inputs.issue_number }}
          QUERY: ${{ steps.get-query.outputs.query }}
          MORPHOSOURCE_RESULTS: ${{ needs.morphosource-api.outputs.results }}
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const issueNumber = parseInt(process.env.ISSUE_NUMBER || '0');
            
            if (!issueNumber) {
              console.log('No issue number provided, skipping comment');
              return;
            }
            
            try {
              // Read the ChatGPT response
              let responseText = 'Processing completed. See workflow artifacts for details.';
              
              if (fs.existsSync('chatgpt_response.json')) {
                const responseData = JSON.parse(fs.readFileSync('chatgpt_response.json', 'utf8'));
                
                if (responseData.status === 'success' && responseData.response) {
                  responseText = responseData.response;
                } else if (responseData.status === 'error') {
                  responseText = '‚ö†Ô∏è Error: ' + responseData.message;
                }
              }
              
              const query = process.env.QUERY || 'N/A';
              const morphosourceResults = process.env.MORPHOSOURCE_RESULTS || '{}';
              
              // Build the comment body
              const commentBody = '## ‚úÖ Query Processing Complete\n\n' +
                '**Query:** ' + query + '\n\n' +
                '---\n\n' +
                '### ü§ñ ChatGPT Response\n\n' +
                responseText + '\n\n' +
                '---\n\n' +
                '### üìä MorphoSource API Results\n\n' +
                '```json\n' +
                morphosourceResults + '\n' +
                '```\n\n' +
                '---\n\n' +
                '**View full details:** [Workflow Run](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId + ')\n\n' +
                '*Download artifacts from the workflow run for complete JSON responses.*';
              
              // Post comment with results
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: commentBody
              });
              
              // Update issue labels
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['query-request', 'completed'],
                state: 'closed'
              });
              
              console.log('Successfully posted results to issue #' + issueNumber);
              
            } catch (error) {
              console.error('Error posting to issue:', error);
              // Don't fail the workflow if posting fails
            }
